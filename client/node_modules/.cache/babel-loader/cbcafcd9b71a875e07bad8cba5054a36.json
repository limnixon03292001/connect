{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useRef, useState, useEffect } from \"react\"; // these custom hooks are used to close modals when clicking, either outside of the modal or pressing esc button\n\nexport const useModalCloser = bool => {\n  _s();\n\n  const ref = useRef(null);\n  const [modalX, setModalX] = useState(bool);\n\n  const handleClickOutside = event => {\n    var _ref$current;\n\n    if (ref.current && !((_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.contains(event.target))) {\n      setModalX(false);\n    }\n  };\n\n  const handleClickEsc = event => {\n    if (event.key === \"Escape\") setModalX(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n    document.addEventListener('keydown', handleClickEsc, true);\n    return () => {\n      document.removeEventListener('click', handleClickOutside, true);\n      document.addEventListener('keydown', handleClickEsc, true);\n    };\n  }, [ref]);\n  return {\n    ref,\n    modalX,\n    setModalX\n  };\n}; // these custom hook are used to close the small modal.. btw i hate to repeat codes, i can't think of anything!!!!\n\n_s(useModalCloser, \"M00zusdZNcdHCxfa2tP6/UF7p1g=\");\n\nexport const useSmallModalCloser = bool => {\n  _s2();\n\n  const smallRef = useRef(null);\n  const [smallModal, setSmallModal] = useState(bool);\n\n  const handleClickOutside = event => {\n    var _smallRef$current;\n\n    if (smallRef.current && !((_smallRef$current = smallRef.current) === null || _smallRef$current === void 0 ? void 0 : _smallRef$current.contains(event.target))) {\n      setSmallModal(false);\n    }\n  };\n\n  const handleClickEsc = event => {\n    if (event.key === \"Escape\") setSmallModal(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n    document.addEventListener('keydown', handleClickEsc, true);\n    return () => {\n      document.removeEventListener('click', handleClickOutside, true);\n      document.addEventListener('keydown', handleClickEsc, true);\n    };\n  }, [smallRef]);\n  return {\n    smallRef,\n    smallModal,\n    setSmallModal\n  };\n};\n\n_s2(useSmallModalCloser, \"b1/uisBr7ZlT6YSNZeOlxqKouw4=\");","map":{"version":3,"sources":["C:/Users/Lim/Desktop/Clone/login-mern/client/src/customHooks/hooks.js"],"names":["useRef","useState","useEffect","useModalCloser","bool","ref","modalX","setModalX","handleClickOutside","event","current","contains","target","handleClickEsc","key","document","addEventListener","removeEventListener","useSmallModalCloser","smallRef","smallModal","setSmallModal"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C,C,CAGA;;AAEA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAAA;;AACpC,QAAMC,GAAG,GAAGL,MAAM,CAAC,IAAD,CAAlB;AACA,QAAK,CAACM,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAACG,IAAD,CAAnC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAAA;;AAClC,QAAGJ,GAAG,CAACK,OAAJ,IAAe,kBAACL,GAAG,CAACK,OAAL,iDAAC,aAAaC,QAAb,CAAsBF,KAAK,CAACG,MAA5B,CAAD,CAAlB,EAAuD;AACnDL,MAAAA,SAAS,CAAC,KAAD,CAAT;AACH;AACJ,GAJD;;AAKA,QAAOM,cAAc,GAAIJ,KAAD,IAAW;AAC/B,QAAGA,KAAK,CAACK,GAAN,KAAc,QAAjB,EAA2BP,SAAS,CAAC,KAAD,CAAT;AAC9B,GAFD;;AAGAL,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCR,kBAAnC,EAAuD,IAAvD;AACCO,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCH,cAArC,EAAqD,IAArD;AACD,WAAO,MAAM;AACTE,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCT,kBAAtC,EAA0D,IAA1D;AACAO,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCH,cAArC,EAAqD,IAArD;AACH,KAHD;AAIH,GAPQ,EAON,CAACR,GAAD,CAPM,CAAT;AAUA,SAAO;AAACA,IAAAA,GAAD;AAAMC,IAAAA,MAAN;AAAcC,IAAAA;AAAd,GAAP;AACH,CAvBM,C,CAyBP;;GAzBaJ,c;;AA0Bb,OAAO,MAAMe,mBAAmB,GAAId,IAAD,IAAU;AAAA;;AACzC,QAAMe,QAAQ,GAAGnB,MAAM,CAAC,IAAD,CAAvB;AACA,QAAK,CAACoB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAACG,IAAD,CAA3C;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAAA;;AAClC,QAAGU,QAAQ,CAACT,OAAT,IAAoB,uBAACS,QAAQ,CAACT,OAAV,sDAAC,kBAAkBC,QAAlB,CAA2BF,KAAK,CAACG,MAAjC,CAAD,CAAvB,EAAiE;AAC7DS,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GAJD;;AAKA,QAAOR,cAAc,GAAIJ,KAAD,IAAW;AAC/B,QAAGA,KAAK,CAACK,GAAN,KAAc,QAAjB,EAA4BO,aAAa,CAAC,KAAD,CAAb;AAC/B,GAFD;;AAGAnB,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCR,kBAAnC,EAAuD,IAAvD;AACCO,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCH,cAArC,EAAqD,IAArD;AACD,WAAO,MAAM;AACTE,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCT,kBAAtC,EAA0D,IAA1D;AACAO,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCH,cAArC,EAAqD,IAArD;AACH,KAHD;AAIH,GAPQ,EAON,CAACM,QAAD,CAPM,CAAT;AAUA,SAAO;AAACA,IAAAA,QAAD;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA;AAAvB,GAAP;AACH,CAvBM;;IAAMH,mB","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\r\n\r\n\r\n// these custom hooks are used to close modals when clicking, either outside of the modal or pressing esc button\r\n\r\nexport const useModalCloser = (bool) => {\r\n    const ref = useRef(null);\r\n    const[modalX, setModalX] = useState(bool);\r\n\r\n    const handleClickOutside = (event) => {\r\n        if(ref.current && !ref.current?.contains(event.target)){\r\n            setModalX(false);\r\n        }\r\n    }\r\n    const  handleClickEsc = (event) => {\r\n        if(event.key === \"Escape\") setModalX(false)\r\n    }\r\n    useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, true);\r\n         document.addEventListener('keydown', handleClickEsc, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n            document.addEventListener('keydown', handleClickEsc, true);\r\n        }\r\n    }, [ref])\r\n   \r\n\r\n    return {ref, modalX, setModalX};\r\n}\r\n\r\n// these custom hook are used to close the small modal.. btw i hate to repeat codes, i can't think of anything!!!!\r\nexport const useSmallModalCloser = (bool) => {\r\n    const smallRef = useRef(null);\r\n    const[smallModal, setSmallModal] = useState(bool);\r\n\r\n    const handleClickOutside = (event) => {\r\n        if(smallRef.current && !smallRef.current?.contains(event.target)){\r\n            setSmallModal(false);\r\n        }\r\n    }\r\n    const  handleClickEsc = (event) => {\r\n        if(event.key === \"Escape\")  setSmallModal(false)\r\n    }\r\n    useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, true);\r\n         document.addEventListener('keydown', handleClickEsc, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n            document.addEventListener('keydown', handleClickEsc, true);\r\n        }\r\n    }, [smallRef])\r\n   \r\n\r\n    return {smallRef, smallModal, setSmallModal};\r\n}"]},"metadata":{},"sourceType":"module"}