{"ast":null,"code":"import * as api from '../../api/post'; //I'll just leave these actions here since we are not using it and we are handling the api request inside the components\n// export const fetchPostsLimit = (history, pageNumber, setHasMore) => async (dispatch) => {\n//     try {\n//         dispatch({type: 'POSTS_LOADING'});\n//         const {data} = await api.fetchPostsLimit(pageNumber);\n//         console.log('post data: ', data);\n//         setHasMore(data.result.length > 0);\n//         dispatch({type: 'POSTS', payload: data});\n//     } catch (err) {\n//         dispatch({type:'ERRORS', payload: err});\n//         if(err.response?.status === 401){\n//             dispatch({type:'LOGOUT'});\n//             history.push('/login');\n//         }\n//     }\n// }\n// export const fetchUserPostsLimit = (history, id, pageNumber,setHasMore) => async (dispatch) => {\n//     try {\n//         dispatch({type:'POSTS_LOADING'});\n//         const {data} = await api.fetchUserPostsLimit(pageNumber, id);\n//         setHasMore(data.result.length > 0);\n//         console.log(data);\n//         dispatch({type: 'POSTS', payload: data});\n//     } catch (err) {\n//         dispatch({type:'ERRORS', payload: err});\n//         if(err.response?.status === 401){\n//             dispatch({type: 'LOGOUT'});\n//             history.push('/login');\n//         }\n//     }\n// }\n\nexport const createPost = (postData, setModalOpen) => async dispatch => {\n  try {\n    dispatch({\n      type: 'NEWPOST_LOADING'\n    });\n    const {\n      data\n    } = await api.createPost(postData);\n    dispatch({\n      type: 'NEW_POST',\n      payload: data\n    });\n    setModalOpen(false);\n  } catch (err) {\n    console.log('error sa created post', err);\n    dispatch({\n      type: 'ERRORS',\n      payload: err\n    });\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    dispatch({\n      type: 'DELETE_LOADING'\n    });\n    await api.deletePost(id);\n    dispatch({\n      type: 'DELETE_POST',\n      payload: id\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: 'ERRORS',\n      payload: err\n    });\n  }\n};\nexport const updatePost = (id, updateData, modalHandler) => async dispatch => {\n  try {\n    dispatch({\n      type: 'UPDATEPOST_LOADING'\n    });\n    const {\n      data\n    } = await api.updatePost(id, updateData);\n    dispatch({\n      type: 'UPDATED_POST',\n      payload: data\n    });\n    modalHandler();\n  } catch (err) {\n    dispatch({\n      type: 'ERRORS',\n      payload: err\n    });\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: 'LIKE_POST',\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ERRORS',\n      payload: err\n    });\n  }\n}; // export const fetchCommentPost = (id) => async(dispatch) => {\n//     try{\n//         dispatch({type:'COMMENT_LOADING'});\n//         const {data} = await api.fetchCommentPost(id);\n//         dispatch({type: 'COMMENT', payload: data});\n//     } catch(err){\n//         dispatch({type: 'ERRORS', payload: err});\n//     }\n// }\n\nexport const createCommentPost = (id, commentData) => async dispatch => {\n  try {\n    dispatch({\n      type: 'CREATE_COMMENT_LOADING'\n    });\n    const {\n      data\n    } = await api.createCommentPost(id, commentData);\n    dispatch({\n      type: 'NEW_COMMENT',\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ERRORS',\n      payload: err\n    });\n  }\n};\nexport const updateCommentPost = (id, commentData, modalHandler) => async dispatch => {\n  try {\n    dispatch({\n      type: 'UPDATE_COMMENT_LOADING'\n    });\n    const {\n      data\n    } = await api.updateCommentPost(id, commentData);\n    dispatch({\n      type: 'UPDATE_COMMENT',\n      payload: data\n    });\n    modalHandler();\n  } catch (err) {\n    dispatch({\n      type: 'ERRORS',\n      payload: err\n    });\n  }\n};\nexport const deleteCommentPost = (postID, commentID, setModal) => async dispatch => {\n  try {\n    dispatch({\n      type: 'DELETE_COMMENT_LOADING'\n    });\n    const {\n      data\n    } = await api.deleteCommentpost(postID, commentID);\n    dispatch({\n      type: 'DELETE_COMMENT',\n      payload: {\n        postID: postID,\n        commentID: commentID\n      }\n    });\n    console.log(data.msg);\n    setModal(false);\n  } catch (err) {\n    dispatch({\n      type: 'ERRORS',\n      payload: err\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Lim/Desktop/Clone/login-mern/client/src/redux/actions/post.js"],"names":["api","createPost","postData","setModalOpen","dispatch","type","data","payload","err","console","log","deletePost","id","updatePost","updateData","modalHandler","likePost","createCommentPost","commentData","updateCommentPost","deleteCommentPost","postID","commentID","setModal","deleteCommentpost","msg"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,gBAArB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAG,CAAEC,QAAF,EAAYC,YAAZ,KAA8B,MAAOC,QAAP,IAAoB;AACxE,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACA,UAAM;AAACC,MAAAA;AAAD,QAAQ,MAAMN,GAAG,CAACC,UAAJ,CAAeC,QAAf,CAApB;AACAE,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,UAAN;AAAiBE,MAAAA,OAAO,EAAED;AAA1B,KAAD,CAAR;AACAH,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,GAND,CAME,OAAOK,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCF,GAApC;AACAJ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,QAAN;AAAgBE,MAAAA,OAAO,EAAEC;AAAzB,KAAD,CAAR;AACH;AACJ,CAXM;AAaP,OAAO,MAAMG,UAAU,GAAIC,EAAD,IAAQ,MAAOR,QAAP,IAAoB;AAClD,MAAG;AACCA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACA,UAAML,GAAG,CAACW,UAAJ,CAAeC,EAAf,CAAN;AACAR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,aAAN;AAAqBE,MAAAA,OAAO,EAAEK;AAA9B,KAAD,CAAR;AACH,GAJD,CAIC,OAAMJ,GAAN,EAAW;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAJ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,QAAN;AAAgBE,MAAAA,OAAO,EAAEC;AAAzB,KAAD,CAAR;AACH;AACJ,CATM;AAWP,OAAO,MAAMK,UAAU,GAAG,CAACD,EAAD,EAAIE,UAAJ,EAAeC,YAAf,KAAgC,MAAOX,QAAP,IAAoB;AAC1E,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMN,GAAG,CAACa,UAAJ,CAAeD,EAAf,EAAkBE,UAAlB,CAArB;AACAV,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,cAAP;AAAuBE,MAAAA,OAAO,EAAED;AAAhC,KAAD,CAAR;AACAS,IAAAA,YAAY;AAEf,GAND,CAME,OAAOP,GAAP,EAAY;AACVJ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,QAAN;AAAgBE,MAAAA,OAAO,EAAEC;AAAzB,KAAD,CAAR;AACH;AACJ,CAVM;AAaP,OAAO,MAAMQ,QAAQ,GAAIJ,EAAD,IAAQ,MAAMR,QAAN,IAAmB;AAC/C,MAAG;AACC,UAAM;AAACE,MAAAA;AAAD,QAAS,MAAMN,GAAG,CAACgB,QAAJ,CAAaJ,EAAb,CAArB;AACAR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,WAAP;AAAoBE,MAAAA,OAAO,EAAED;AAA7B,KAAD,CAAR;AAEH,GAJD,CAIE,OAAME,GAAN,EAAW;AACTJ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,QAAP;AAAiBE,MAAAA,OAAO,EAAEC;AAA1B,KAAD,CAAR;AACH;AACJ,CARM,C,CAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMS,iBAAiB,GAAG,CAACL,EAAD,EAAKM,WAAL,KAAqB,MAAMd,QAAN,IAAmB;AACrE,MAAG;AACCA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMN,GAAG,CAACiB,iBAAJ,CAAsBL,EAAtB,EAAyBM,WAAzB,CAArB;AACAd,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,aAAN;AAAqBE,MAAAA,OAAO,EAAED;AAA9B,KAAD,CAAR;AAEH,GALD,CAKC,OAAME,GAAN,EAAU;AACPJ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,QAAP;AAAiBE,MAAAA,OAAO,EAAEC;AAA1B,KAAD,CAAR;AACH;AACJ,CATM;AAWP,OAAO,MAAMW,iBAAiB,GAAG,CAACP,EAAD,EAAKM,WAAL,EAAkBH,YAAlB,KAAmC,MAAMX,QAAN,IAAmB;AACnF,MAAG;AACCA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMN,GAAG,CAACmB,iBAAJ,CAAsBP,EAAtB,EAA0BM,WAA1B,CAArB;AACAd,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,gBAAN;AAAwBE,MAAAA,OAAO,EAAED;AAAjC,KAAD,CAAR;AACAS,IAAAA,YAAY;AACf,GALD,CAKC,OAAMP,GAAN,EAAU;AACPJ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,QAAN;AAAgBE,MAAAA,OAAO,EAAEC;AAAzB,KAAD,CAAR;AACH;AACJ,CATM;AAWP,OAAO,MAAMY,iBAAiB,GAAG,CAACC,MAAD,EAASC,SAAT,EAAoBC,QAApB,KAAiC,MAAMnB,QAAN,IAAmB;AACjF,MAAG;AACCA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMN,GAAG,CAACwB,iBAAJ,CAAsBH,MAAtB,EAA8BC,SAA9B,CAArB;AACAlB,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,gBAAN;AAAwBE,MAAAA,OAAO,EAAE;AAACc,QAAAA,MAAM,EAAEA,MAAT;AAAiBC,QAAAA,SAAS,EAAEA;AAA5B;AAAjC,KAAD,CAAR;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACmB,GAAjB;AACAF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACH,GAND,CAMC,OAAMf,GAAN,EAAU;AACPJ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,QAAN;AAAgBE,MAAAA,OAAO,EAAEC;AAAzB,KAAD,CAAR;AACH;AACJ,CAVM","sourcesContent":["import * as api from '../../api/post';\r\n\r\n//I'll just leave these actions here since we are not using it and we are handling the api request inside the components\r\n\r\n// export const fetchPostsLimit = (history, pageNumber, setHasMore) => async (dispatch) => {\r\n//     try {\r\n//         dispatch({type: 'POSTS_LOADING'});\r\n//         const {data} = await api.fetchPostsLimit(pageNumber);\r\n//         console.log('post data: ', data);\r\n//         setHasMore(data.result.length > 0);\r\n//         dispatch({type: 'POSTS', payload: data});\r\n//     } catch (err) {\r\n//         dispatch({type:'ERRORS', payload: err});\r\n//         if(err.response?.status === 401){\r\n//             dispatch({type:'LOGOUT'});\r\n//             history.push('/login');\r\n//         }\r\n//     }\r\n// }\r\n// export const fetchUserPostsLimit = (history, id, pageNumber,setHasMore) => async (dispatch) => {\r\n\r\n//     try {\r\n//         dispatch({type:'POSTS_LOADING'});\r\n//         const {data} = await api.fetchUserPostsLimit(pageNumber, id);\r\n//         setHasMore(data.result.length > 0);\r\n//         console.log(data);\r\n//         dispatch({type: 'POSTS', payload: data});\r\n//     } catch (err) {\r\n//         dispatch({type:'ERRORS', payload: err});\r\n//         if(err.response?.status === 401){\r\n//             dispatch({type: 'LOGOUT'});\r\n//             history.push('/login');\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport const createPost = ( postData, setModalOpen ) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: 'NEWPOST_LOADING'});\r\n        const {data}= await api.createPost(postData);\r\n        dispatch({type:'NEW_POST',payload: data});\r\n        setModalOpen(false);\r\n        \r\n    } catch (err) {\r\n        console.log('error sa created post',err);\r\n        dispatch({type:'ERRORS', payload: err});\r\n    }\r\n}\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n    try{\r\n        dispatch({type: 'DELETE_LOADING'});\r\n        await api.deletePost(id);\r\n        dispatch({type:'DELETE_POST', payload: id});\r\n    }catch(err) {\r\n        console.log(err);\r\n        dispatch({type:'ERRORS', payload: err});\r\n    }\r\n}\r\n\r\nexport const updatePost = (id,updateData,modalHandler) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: 'UPDATEPOST_LOADING'});\r\n        const {data} = await api.updatePost(id,updateData);\r\n        dispatch({type: 'UPDATED_POST', payload: data});\r\n        modalHandler();\r\n   \r\n    } catch (err) {\r\n        dispatch({type:'ERRORS', payload: err});\r\n    }\r\n}\r\n\r\n\r\nexport const likePost = (id) => async(dispatch) => {\r\n    try{\r\n        const {data} = await api.likePost(id);\r\n        dispatch({type: 'LIKE_POST', payload: data});\r\n    \r\n    } catch(err) {\r\n        dispatch({type: 'ERRORS', payload: err})\r\n    }\r\n}\r\n\r\n\r\n// export const fetchCommentPost = (id) => async(dispatch) => {\r\n//     try{\r\n//         dispatch({type:'COMMENT_LOADING'});\r\n//         const {data} = await api.fetchCommentPost(id);\r\n//         dispatch({type: 'COMMENT', payload: data});\r\n//     } catch(err){\r\n//         dispatch({type: 'ERRORS', payload: err});\r\n//     }\r\n// }\r\n\r\nexport const createCommentPost = (id, commentData) => async(dispatch) => {\r\n    try{\r\n        dispatch({type: 'CREATE_COMMENT_LOADING'});\r\n        const {data} = await api.createCommentPost(id,commentData);\r\n        dispatch({type:'NEW_COMMENT', payload: data});\r\n    \r\n    }catch(err){\r\n        dispatch({type: 'ERRORS', payload: err});\r\n    }\r\n}\r\n\r\nexport const updateCommentPost = (id, commentData, modalHandler) => async(dispatch) => {\r\n    try{\r\n        dispatch({type:'UPDATE_COMMENT_LOADING'});\r\n        const {data} = await api.updateCommentPost(id, commentData);\r\n        dispatch({type:'UPDATE_COMMENT', payload: data});\r\n        modalHandler();\r\n    }catch(err){\r\n        dispatch({type:'ERRORS', payload: err});\r\n    }\r\n}\r\n\r\nexport const deleteCommentPost = (postID, commentID, setModal) => async(dispatch) => {\r\n    try{\r\n        dispatch({type:'DELETE_COMMENT_LOADING'});\r\n        const {data} = await api.deleteCommentpost(postID, commentID);\r\n        dispatch({type:'DELETE_COMMENT', payload: {postID: postID, commentID: commentID}});\r\n        console.log(data.msg);\r\n        setModal(false);\r\n    }catch(err){\r\n        dispatch({type:'ERRORS', payload: err});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}