{"ast":null,"code":"const initalState = {\n  loading: false,\n  newPostLoading: false,\n  deleteLoading: false,\n  updateLoading: false,\n  commentLoading: false,\n  createCommentLoading: false,\n  updateCommentLoading: false,\n  deleteCommentLoading: false,\n  errors: null,\n  posts: []\n};\n\nconst postReducer = (state = initalState, action) => {\n  switch (action.type) {\n    case 'POSTS':\n      return { ...state,\n        loading: false,\n        errors: null,\n        posts: [...state.posts, ...action.payload.result.map(post => state.posts.some(postx => postx._id === post._id) ? 0 : post)]\n      };\n\n    case 'RESET_POSTS':\n      return { ...state,\n        loading: true,\n        posts: []\n      };\n\n    case 'NEW_POST':\n      return { ...state,\n        loading: false,\n        newPostLoading: false,\n        errors: null,\n        posts: [action.payload.result, ...state.posts]\n      };\n\n    case 'DELETE_POST':\n      return { ...state,\n        deleteLoading: false,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n\n    case 'UPDATED_POST':\n      return { ...state,\n        updateLoading: false,\n        posts: state.posts.map(post => post._id === action.payload.result._id ? action.payload.result : post)\n      };\n\n    case 'COMMENT':\n      return { ...state,\n        commentLoading: false,\n        posts: state.posts.map(post => post._id === action.payload.result._id ? { ...post,\n          comment: action.payload.result.comment\n        } : post)\n      };\n\n    case 'UPDATE_COMMENT':\n    case 'NEW_COMMENT':\n      return { ...state,\n        createCommentLoading: false,\n        updateCommentLoading: false,\n        posts: state.posts.map(post => post._id === action.payload.result._id ? { ...post,\n          comment: action.payload.result.comment\n        } : post)\n      };\n\n    case 'DELETE_COMMENT':\n      return { ...state,\n        deleteCommentLoading: false,\n        posts: state.posts.map(post => post._id === action.payload.postID ? { ...post,\n          comment: post.comment.filter(comment => comment._id !== action.payload.commentID)\n        } : post)\n      };\n\n    case 'LIKE_POST':\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload.updatedPost._id ? { ...post,\n          likes: action.payload.updatedPost.likes\n        } : post)\n      };\n\n    case 'POSTS_LOADING':\n      return { ...state,\n        loading: true\n      };\n\n    case 'NEWPOST_LOADING':\n      return { ...state,\n        newPostLoading: true\n      };\n\n    case 'DELETE_LOADING':\n      return { ...state,\n        deleteLoading: true\n      };\n\n    case 'UPDATEPOST_LOADING':\n      return { ...state,\n        updateLoading: true\n      };\n\n    case 'COMMENT_LOADING':\n      return { ...state,\n        commentLoading: true\n      };\n\n    case 'CREATE_COMMENT_LOADING':\n      return { ...state,\n        createCommentLoading: true\n      };\n\n    case 'UPDATE_COMMENT_LOADING':\n      return { ...state,\n        updateCommentLoading: true\n      };\n\n    case 'DELETE_COMMENT_LOADING':\n      return { ...state,\n        deleteCommentLoading: true\n      };\n\n    case 'ERRORS':\n      return { ...state,\n        loading: false,\n        newPostLoading: false,\n        deleteLoading: false,\n        updateLoading: false,\n        commentLoading: false,\n        createCommentLoading: false,\n        updateCommentLoading: false,\n        deleteCommentLoading: false,\n        errors: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;","map":{"version":3,"sources":["C:/Users/Lim/Desktop/Clone/login-mern/client/src/redux/reducers/post.js"],"names":["initalState","loading","newPostLoading","deleteLoading","updateLoading","commentLoading","createCommentLoading","updateCommentLoading","deleteCommentLoading","errors","posts","postReducer","state","action","type","payload","result","map","post","some","postx","_id","filter","comment","postID","commentID","updatedPost","likes"],"mappings":"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","sourcesContent":["\r\nconst initalState = {\r\n    loading:false,\r\n    newPostLoading: false,\r\n    deleteLoading: false,\r\n    updateLoading: false,\r\n    commentLoading: false,\r\n    createCommentLoading: false,\r\n    updateCommentLoading: false,\r\n    deleteCommentLoading: false,\r\n    errors: null,\r\n\r\n    posts: [],\r\n}\r\n\r\nconst postReducer = (state= initalState, action) => {\r\n    switch(action.type){\r\n        case 'POSTS':\r\n            return {...state, loading: false, errors:null, posts: [...state.posts, ...action.payload.result.map(post => state.posts.some(postx => postx._id === post._id ) ? 0 : post)] } ;\r\n\r\n        case 'RESET_POSTS':\r\n            return {...state, loading:true, posts: []};\r\n            \r\n        case 'NEW_POST': \r\n            return {...state, loading:false, newPostLoading: false, errors: null, posts: [ action.payload.result, ...state.posts ]};\r\n\r\n        case 'DELETE_POST':\r\n           return {...state, deleteLoading: false, posts: state.posts.filter((post) => post._id !== action.payload)};\r\n        \r\n        case 'UPDATED_POST':\r\n            return {...state, updateLoading: false, posts: state.posts.map((post) => post._id === action.payload.result._id ? action.payload.result : post)};\r\n\r\n        case 'COMMENT':\r\n            return {...state, commentLoading: false, posts: state.posts.map((post) => post._id === action.payload.result._id ? {...post, comment: action.payload.result.comment} : post )};\r\n      \r\n        case 'UPDATE_COMMENT':\r\n        case 'NEW_COMMENT':\r\n            return {...state, createCommentLoading: false, updateCommentLoading: false, posts: state.posts.map((post) => post._id === action.payload.result._id ? {...post,\r\n            comment: action.payload.result.comment} : post )};\r\n\r\n        case 'DELETE_COMMENT':\r\n            return {...state, \r\n                    deleteCommentLoading: false, \r\n                    posts: state.posts.map(post => post._id === action.payload.postID ? \r\n                        {...post, comment: post.comment.filter(\r\n                            comment => comment._id !== action.payload.commentID\r\n                        )}\r\n                        : post)\r\n                    };\r\n  \r\n        case 'LIKE_POST':\r\n            return {...state,\r\n                 posts: state.posts.map((post) => post._id === action.payload.updatedPost._id ?\r\n                 {...post, likes: action.payload.updatedPost.likes} : post)};\r\n                \r\n        case 'POSTS_LOADING':\r\n            return {...state, loading: true};\r\n\r\n        case 'NEWPOST_LOADING':\r\n            return {...state, newPostLoading: true};\r\n\r\n        case 'DELETE_LOADING':\r\n            return {...state, deleteLoading: true};\r\n        \r\n        case 'UPDATEPOST_LOADING':\r\n            return {...state, updateLoading:  true};\r\n\r\n        case 'COMMENT_LOADING':\r\n            return {...state, commentLoading:  true}; \r\n\r\n        case 'CREATE_COMMENT_LOADING':\r\n            return {...state, createCommentLoading: true}; \r\n\r\n        case 'UPDATE_COMMENT_LOADING':\r\n            return {...state, updateCommentLoading: true};\r\n        \r\n        case 'DELETE_COMMENT_LOADING':\r\n            return {...state, deleteCommentLoading: true};\r\n        \r\n        case 'ERRORS':\r\n            return {...state, loading: false, newPostLoading: false, deleteLoading: false,  updateLoading: false, commentLoading: false, createCommentLoading: false,updateCommentLoading: false, deleteCommentLoading: false, errors: action.payload};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;"]},"metadata":{},"sourceType":"module"}