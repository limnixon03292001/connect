{"ast":null,"code":"import _slicedToArray from\"C:/Users/Lim/Desktop/Clone/login-mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useRef,useState,useEffect}from\"react\";// these custom hooks are used to close modals when clicking, either outside of the modal or pressing esc button\nexport var useModalCloser=function useModalCloser(bool){var ref=useRef(null);var _useState=useState(bool),_useState2=_slicedToArray(_useState,2),modalX=_useState2[0],setModalX=_useState2[1];var handleClickOutside=function handleClickOutside(event){var _ref$current;if(ref.current&&!((_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.contains(event.target))){setModalX(false);}};var handleClickEsc=function handleClickEsc(event){if(event.key===\"Escape\")setModalX(false);};useEffect(function(){document.addEventListener('click',handleClickOutside,true);document.addEventListener('keydown',handleClickEsc,true);return function(){document.removeEventListener('click',handleClickOutside,true);document.addEventListener('keydown',handleClickEsc,true);};},[ref]);return{ref:ref,modalX:modalX,setModalX:setModalX};};// these custom hook are used to close the small modal.. btw i hate to repeat codes, i can't think of anything!!!!\nexport var useSmallModalCloser=function useSmallModalCloser(bool){var smallRef=useRef(null);var _useState3=useState(bool),_useState4=_slicedToArray(_useState3,2),smallModal=_useState4[0],setSmallModal=_useState4[1];var handleClickOutside=function handleClickOutside(event){var _smallRef$current;if(smallRef.current&&!((_smallRef$current=smallRef.current)===null||_smallRef$current===void 0?void 0:_smallRef$current.contains(event.target))){setSmallModal(false);}};var handleClickEsc=function handleClickEsc(event){if(event.key===\"Escape\")setSmallModal(false);};useEffect(function(){document.addEventListener('click',handleClickOutside,true);document.addEventListener('keydown',handleClickEsc,true);return function(){document.removeEventListener('click',handleClickOutside,true);document.addEventListener('keydown',handleClickEsc,true);};},[smallRef]);return{smallRef:smallRef,smallModal:smallModal,setSmallModal:setSmallModal};};","map":{"version":3,"sources":["C:/Users/Lim/Desktop/Clone/login-mern/client/src/customHooks/hooks.js"],"names":["useRef","useState","useEffect","useModalCloser","bool","ref","modalX","setModalX","handleClickOutside","event","current","contains","target","handleClickEsc","key","document","addEventListener","removeEventListener","useSmallModalCloser","smallRef","smallModal","setSmallModal"],"mappings":"mKAAA,OAASA,MAAT,CAAiBC,QAAjB,CAA2BC,SAA3B,KAA4C,OAA5C,CAGA;AAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,CAAU,CACpC,GAAMC,CAAAA,GAAG,CAAGL,MAAM,CAAC,IAAD,CAAlB,CACA,cAA2BC,QAAQ,CAACG,IAAD,CAAnC,wCAAME,MAAN,eAAcC,SAAd,eAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAW,kBAClC,GAAGJ,GAAG,CAACK,OAAJ,EAAe,gBAACL,GAAG,CAACK,OAAL,uCAAC,aAAaC,QAAb,CAAsBF,KAAK,CAACG,MAA5B,CAAD,CAAlB,CAAuD,CACnDL,SAAS,CAAC,KAAD,CAAT,CACH,CACJ,CAJD,CAKA,GAAOM,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACJ,KAAD,CAAW,CAC/B,GAAGA,KAAK,CAACK,GAAN,GAAc,QAAjB,CAA2BP,SAAS,CAAC,KAAD,CAAT,CAC9B,CAFD,CAGAL,SAAS,CAAC,UAAM,CACZa,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmCR,kBAAnC,CAAuD,IAAvD,EACCO,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,CAAqCH,cAArC,CAAqD,IAArD,EACD,MAAO,WAAM,CACTE,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,CAAsCT,kBAAtC,CAA0D,IAA1D,EACAO,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,CAAqCH,cAArC,CAAqD,IAArD,EACH,CAHD,CAIH,CAPQ,CAON,CAACR,GAAD,CAPM,CAAT,CAUA,MAAO,CAACA,GAAG,CAAHA,GAAD,CAAMC,MAAM,CAANA,MAAN,CAAcC,SAAS,CAATA,SAAd,CAAP,CACH,CAvBM,CAyBP;AACA,MAAO,IAAMW,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACd,IAAD,CAAU,CACzC,GAAMe,CAAAA,QAAQ,CAAGnB,MAAM,CAAC,IAAD,CAAvB,CACA,eAAmCC,QAAQ,CAACG,IAAD,CAA3C,yCAAMgB,UAAN,eAAkBC,aAAlB,eAEA,GAAMb,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAW,uBAClC,GAAGU,QAAQ,CAACT,OAAT,EAAoB,qBAACS,QAAQ,CAACT,OAAV,4CAAC,kBAAkBC,QAAlB,CAA2BF,KAAK,CAACG,MAAjC,CAAD,CAAvB,CAAiE,CAC7DS,aAAa,CAAC,KAAD,CAAb,CACH,CACJ,CAJD,CAKA,GAAOR,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACJ,KAAD,CAAW,CAC/B,GAAGA,KAAK,CAACK,GAAN,GAAc,QAAjB,CAA4BO,aAAa,CAAC,KAAD,CAAb,CAC/B,CAFD,CAGAnB,SAAS,CAAC,UAAM,CACZa,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmCR,kBAAnC,CAAuD,IAAvD,EACCO,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,CAAqCH,cAArC,CAAqD,IAArD,EACD,MAAO,WAAM,CACTE,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,CAAsCT,kBAAtC,CAA0D,IAA1D,EACAO,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,CAAqCH,cAArC,CAAqD,IAArD,EACH,CAHD,CAIH,CAPQ,CAON,CAACM,QAAD,CAPM,CAAT,CAUA,MAAO,CAACA,QAAQ,CAARA,QAAD,CAAWC,UAAU,CAAVA,UAAX,CAAuBC,aAAa,CAAbA,aAAvB,CAAP,CACH,CAvBM","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\r\n\r\n\r\n// these custom hooks are used to close modals when clicking, either outside of the modal or pressing esc button\r\n\r\nexport const useModalCloser = (bool) => {\r\n    const ref = useRef(null);\r\n    const[modalX, setModalX] = useState(bool);\r\n\r\n    const handleClickOutside = (event) => {\r\n        if(ref.current && !ref.current?.contains(event.target)){\r\n            setModalX(false);\r\n        }\r\n    }\r\n    const  handleClickEsc = (event) => {\r\n        if(event.key === \"Escape\") setModalX(false)\r\n    }\r\n    useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, true);\r\n         document.addEventListener('keydown', handleClickEsc, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n            document.addEventListener('keydown', handleClickEsc, true);\r\n        }\r\n    }, [ref])\r\n   \r\n\r\n    return {ref, modalX, setModalX};\r\n}\r\n\r\n// these custom hook are used to close the small modal.. btw i hate to repeat codes, i can't think of anything!!!!\r\nexport const useSmallModalCloser = (bool) => {\r\n    const smallRef = useRef(null);\r\n    const[smallModal, setSmallModal] = useState(bool);\r\n\r\n    const handleClickOutside = (event) => {\r\n        if(smallRef.current && !smallRef.current?.contains(event.target)){\r\n            setSmallModal(false);\r\n        }\r\n    }\r\n    const  handleClickEsc = (event) => {\r\n        if(event.key === \"Escape\")  setSmallModal(false)\r\n    }\r\n    useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, true);\r\n         document.addEventListener('keydown', handleClickEsc, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n            document.addEventListener('keydown', handleClickEsc, true);\r\n        }\r\n    }, [smallRef])\r\n   \r\n\r\n    return {smallRef, smallModal, setSmallModal};\r\n}"]},"metadata":{},"sourceType":"module"}